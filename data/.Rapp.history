#working directory here#
#original code by A. R. Martinig#
#last edited May 15, 2024 by A. R. Martinig#
#
#Delete previous information stored #
rm(list=ls(all=T))#
#
##set wd to the folder with all your csv's in it#
setwd("~/Documents/Files/Post-docs/UofC/Naomi (PURE)/gestation/data")
#script to download packages and set formatting for plots#
#original code by A. R. Martinig#
#last edited on June 18, 2024 by A. R. Martinig #
#
options(scipen=999, dplyr.width = Inf, tibble.print_min = 50, repos='http://cran.rstudio.com/') #scipen forces outputs to not be in scientific notation #dplyr.width will show all columns for head() function and tibble.print_min sets how many rows are printed and repos sets the cran mirror#
#
#load libraries#
pacman::p_load(#
				dplyr,#
				lubridate,#
				tidyverse,#
				data.table,#
				lme4,#
               	krsp,#
               	sjPlot,#
               	sjlabelled, #
               	sjmisc,#
               	scales,#
               	ggplot2,#
               	ggeffects#
)#
#
select<-dplyr::select#
filter<-dplyr::filter#
#conserved theme across plots for plots#
#general theme#
theme_squirrel <-#
	theme_bw() +#
	theme(axis.line = element_line(colour = "black"),#
        axis.text=element_text(size=15), #changes size of axes #s#
        axis.title=element_text(size=15), #changes size of axes labels#
        panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        panel.border = element_blank(),#
        panel.background = element_blank(),#
        text = element_text(size = 15)) #
#dot-whisker plot theme       #
theme_squirrel_dot <- #
	theme_bw() +#
 	theme(plot.margin = margin(0, 0.5, 0, 0, "cm"),#
		axis.line=element_line(),#
		axis.line.y=element_blank(),#
		axis.ticks.length=unit(0.4, "cm"),#
		axis.ticks.y=element_blank(),#
    	axis.text=element_text(size=10), #changes size of axes #s#
        axis.title=element_text(size=15), #changes size of axes labels#
        panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        panel.border = element_blank(),#
        panel.background = element_blank(),#
        text = element_text(size = 10))
gest<-read.csv("final_dataset.csv", header=T)
final_df<-gest %>% #
	ungroup() %>%#
	group_by(grid) %>%#
	mutate(#
		mast=as.factor(mast),#
		treatment=as.factor(treatment),#
		gestation_age_sd=((gestation_age-mean(gestation_age))/(1*(sd(gestation_age)))),#
		gestation_age_sd = replace(gestation_age_sd, is.na(gestation_age_sd), 0),#
		gestation_age2_sd=((gestation_age2-mean(gestation_age2))/(1*(sd(gestation_age2)))),#
		gestation_age2_sd = replace(gestation_age2_sd, is.na(gestation_age2_sd), 0),#
		n_pups_sd=((n_pups-mean(n_pups, na.rm=T))/(1*(sd(n_pups, na.rm=T)))),#
		n_pups_sd = replace(n_pups_sd, is.na(n_pups_sd), 0),#
		litter_ratio_sd =((litter_ratio-mean(litter_ratio, na.rm=T))/(1*(sd(litter_ratio, na.rm=T)))),#
		litter_ratio_sd = replace(litter_ratio_sd, is.na(litter_ratio_sd), 0),#
		#can't standardize cone_index_tm1#
		year_sd=(year-1995)) %>%#
	ungroup() #
#
summary(final_df)#
#
#correlations #
attach(final_df);tt=cbind(gestation_age, gestation_age2, litter_ratio, n_pups,  mast, cone_index_tm1)#
cor(tt) #
#gestation_age & gestation_age2 are highly correlated (0.98) #should not keep both in the analysis#
#highest value is 0.37#
#
#mean > var, #good to use logistic regression#
#if var > mean, then the data would be significantly overdispersed (variance > mean)#
mean(final_df $gestation_days)#
var(final_df $gestation_days)#
#
plot(final_df $gestation_days)#
#
#standardized model#
#
model_sd<-lmer(gestation_days ~ gestation_age2_sd + litter_ratio_sd + n_pups_sd + mast + cone_index_tm1 + treatment + (1|year_sd), data= transform(final_df, treatment =relevel(treatment, "control"))) #relevel is to make the control the reference category#
summary(model_sd)#
#
plot(model_sd) #
hist(resid(model_sd))#
#
confint(model_sd, method='Wald')#
#model with variables not standardized#
model<-lmer(gestation_days ~ gestation_age2 + litter_ratio + n_pups + mast + cone_index_tm1 + treatment + (1|year), data= transform(final_df, treatment =relevel(treatment, "control")))#
summary(model)
confint(model,method='Wald')
